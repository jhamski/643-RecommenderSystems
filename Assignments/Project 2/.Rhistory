start
stop
substr(square, 5, 1)
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start 5 4
substr(square, start, stop)
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 4
substr(square, start, stop)
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 4
substr(square, start, stop)
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
substr(square, start, stop)
middle.sq <- function(seed){
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
seed = 2041
middle.sq(seed)
?recursive
rapply
?rapply
seed = 2041
for (i in 1:10){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq(1656)
1656**2
middle.sq(1656)
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
seed = 2041
for (i in 1:10){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
?sample
race.simulation <- sample(x=horses, size = races, prob = odds)
odds <- c(1/7, 1/5, 1/9, 1/12, 1/4, 1/35, 1/15, 1/4)
horses <- c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD")
key <- 1:8
races <- 1000
race.simulation <- sample(x=horses, size = races, prob = odds)
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
str(race.simulation)
summary(race.simulation)
horses <- as.factors(c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD"))
horses <- as.factor(c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD"))
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
summary(race.simulation)
hist(race.simulation)
summary(race.simulation)
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
summary(race.simulation)
sum(odds)
library(ggplot2)
lag.times <- 2:7
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.simulation
qplot(lag.simulation)
qplot(x = lag.times, y = lag.prob)
qplot(x = lag.times, y = lag.prob) + qplot(lag.simulation)
qplot(x = lag.times, y = lag.prob) + geom_bar(lag.simulation, stat="bin")
summary(lag.simulation)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
summary(lag.simulation)
summary(lag.simulation)[1]
summary(lag.simulation)[1,]
summary(lag.simulation)[1:,]
summary(lag.simulation)[,1]
agggregate(lag.simulation)
aggregate(lag.simulation)
aggregate(lag.simulation, FUN=sum())
aggregate(lag.simulation, FUN=sum
)
library(dplyr)
count(lag.simulation)
table(lag.simulation)
lag <- table(lag.simulation)
lag
lag <- as.data.framd(table(lag.simulation))
lag <- as.data.frame(table(lag.simulation))
lag
lag.results <- cbind(lag, lag.prob)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
lag.results
ggplot(lag.results, aes(x=lag.simulation, lag.prob))
ggplot(lag.results, aes(x=lag.simulation, lag.prob)) +geom_bar()
ggplot(lag.results) +geom_bar(aes(x=lag.simulation, lag.prob))
lag.results
ggplot(lag.results) +geom_bar(aes(x=lag.simulation, y = lag.prob))
ggplot(lag.results) +geom_bar(aes(lag.prob))
ggplot(lag.results) +geom_point(aes(lag.prob))
lag.results
ggplot(lag.results) +geom_point(aes(x = log.simulation, y = lag.prob))
ggplot(lag.results) +geom_point(aes(x = lag.simulation, y = lag.prob))
ggplot(lag.results) +geom_point(aes(x = lag.simulation, y = lag.prob)) + geom_line(aes(x = lag.simulation, y = Freq))
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation)/1000)
lag.results <- cbind(lag, lag.prob)
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation)/trials)
lag.results <- cbind(lag, lag.prob)
lag.results
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
col.names(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
colnames(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
lag.results
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
print(lag.results)
library(knitr)
?kable
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
colnames(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
kable(lag.results)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
new.names <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
colnames(lag.results) <- new.names
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
kable(lag.results)
str(new.names)
str(lag.results)
```{r test-bash, engine='bash'}
echo hello world
echo 'a b c' | sed 's/ /\|/g'
# number of lines
awk 'END{print NR;}' 027-engine-bash.Rmd
```
```{r test-bash, engine='bash'}
echo hello world
# number of lines
echo hello world
echo 'a b c' | sed 's/ /\|/g'
# number of lines
awk 'END{print NR;}' 027-engine-bash.Rmd
library(c("readr", "bigvis"))
library("readr")
library("bigviz")
install.packages("devtools")
library("devtools")
devtools::install_github("hadley/bigvis")
install.packages("devtools")
devtools::install_github("hadley/bigvis")
library('devtools')
devtools::install_github("hadley/bigvis")
library("readr")
# use bigvis to bin, condense, smooth and present data
library('bigvis')
library('ggplot2')
# subset the diamonds data
mydiamonds <- subset(diamonds, carat < 2.75)
# condense avg price based on bins of carat sizes of .1 carat intervals
myd <- condense(bin(mydiamonds$carat, .1), z=mydiamonds$price, summary="mean")
# smooth out the trend
myds <- smooth(myd, 50, var=".mean", type="robust")
# plot the orginal binned prices vs the smoothed trend line
ggplot() + geom_line(data=myd, aes(x=mydiamonds.carat, y=.mean, colour="Avg Price")) +
geom_line(data=myds, aes(x=mydiamonds.carat, y=.mean, colour="Smoothed")) +
ggtitle("Avg Diamond prices by binned Carat") +
ylab("Avg Price") +
xlab("Carats") +
scale_colour_manual("", breaks=c("Avg Price","Smoothed"), values=c("blue", "black"))
round(1.25, 1)
round(1.25, 0)
DT1 = data.table(a = 1:2, b = 1:2)
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
?gvisMerge
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
install.packages(c("datadr", "git2r", "housingData", "htmltools", "nlme", "rbokeh", "RcppArmadillo", "rex", "TTR"))
install.packages("lpSolve")
payoff.matrix <- rbind(
c(3000, 4500, 6000),
c(1000, 9000, 2000),
c(4500, 4000, 3500))
payoff.matrix <- as.matrix(rbind(
c(3000, 4500, 6000),
c(1000, 9000, 2000),
c(4500, 4000, 3500)))
payoff.matrix <- as.matrix(rbind(
c(10000, 6500, -4000),
c(8000, 6000, 1000),
c(5000, 5000, 5000)))
payoff.matrix
constraint.matrix <- cbind(payoff.matrix[ , 1] -
payoff.matrix[ , 3],
payoff.matrix[ , 2] -
payoff.matrix[ , 3],
c(-1, -1, -1))
constraint.matrix
right.side <- -1 * payoff.matrix[ , 3]
right.side
install.packages("reshape")
require(igraph) # for networks
require(reshape) # to change the resulted data in a format ggplot2 can use
require(ggplot2) # for plotting
# size of the lattice
sidelength<img class="alignnone wp-image-594 size-full" src="https://marcosmolla.files.wordpress.com/2015/07/abm_3-1.png" alt="ABM_3-1" width="672" height="480" />
library(knitr)
library(igraph)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + path("a", "b")
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + path("a", "b")
plot(g)
V(g)
path(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + edge("a", "b")
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + edge("a", "b")
g <- g + edge("b", "a")
plot(g)
path(g)
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
install.packages("reconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
install.packages("data.table")
# Chunk 1: load_libraries
require(shiny)
require(recommenderlab)
require(Matrix)
require(dplyr)
require(tidyr)
require(ggplot2)
options(scipen=999)
# Chunk 2: Read_Dataset
user.artists.pairwise <- read.delim('hetrec2011-lastfm-2k/user_artists.dat', sep="\t")
artists <- read.delim('hetrec2011-lastfm-2k/artists.dat', sep="\t") %>%
select(id, name)
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 1")
user.artists.pairwise <- read.delim('hetrec2011-lastfm-2k/user_artists.dat', sep="\t")
artists <- read.delim('hetrec2011-lastfm-2k/artists.dat', sep="\t") %>%
select(id, name)
colnames(artists) <- c("artistID", "name")
#note: one duplicate artist
#artists$name[duplicated(artists$name)==TRUE]
user.artists.pairwise <- inner_join(user.artists.pairwise, artists, by="artistID")
user.artists.pairwise <- select(user.artists.pairwise, -artistID)
user.artists.pairwise$name <- strtrim(user.artists.pairwise$name, 100)
user.artists.pairwise[16060,]$name <- NA
ggplot(user.artists.pairwise, aes(x = weight)) + geom_density() + theme_bw() + scale_x_log10()
saveRDS(user.artists.pairwise, file="user_artists_pairwise.RDS")
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 2")
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
str(user.taggedartist)
str(user.artists.pairwise)
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 1")
# Chunk 1: load_libraries
require(codetools)
require(shiny)
require(webshot)
require(recommenderlab)
require(Matrix)
require(dplyr)
require(tidyr)
require(ggplot2)
options(scipen=999)
# Chunk 2: Read_Dataset
user.artists.pairwise <- read.delim('hetrec2011-lastfm-2k/user_artists.dat', sep="\t")
artists <- read.delim('hetrec2011-lastfm-2k/artists.dat', sep="\t") %>%
select(id, name)
colnames(artists) <- c("artistID", "name")
#note: one duplicate artist
#artists$name[duplicated(artists$name)==TRUE]
user.artists.pairwise <- inner_join(user.artists.pairwise, artists, by="artistID")
#user.artists.pairwise <- select(user.artists.pairwise, -artistID)
user.artists.pairwise$name <- strtrim(user.artists.pairwise$name, 100)
user.artists.pairwise[16060,]$name <- NA
saveRDS(user.artists.pairwise, "user_artists_pairwise.RDS")
ggplot(user.artists.pairwise, aes(x = weight)) + geom_density() + theme_bw() + scale_x_log10()
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 2")
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
#use a file from the other dataset
user.artists.pairwise <- readRDS("user_artists_pairwise.RDS")
str(user.artists.pairwise)
View(user.taggedartist)
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
tags <- read.delim('hetrec2011-lastfm-2k/tags.dat', sep="\t")
View(tags)
require(dplyr)
str(user.taggedartist)
str(tags)
user.taggedartist <- inner_join(user.taggedartist, tags, by = "tagID")
View(user.taggedartist)
require(dplyr)
require(ggplot2)
ggplot(user.taggedartist, aes(x=tagValue)) + geom_hist()
ggplot(user.taggedartist, aes(x=tagValue)) + geom_histogram()
ggplot(user.taggedartist, aes(x=tagValue)) + geom_histogram(stat = "count")
ggplot(user.taggedartist, aes(x=tagValue, stat = "count")) + geom_histogram()
ggplot(user.taggedartist, aes(x=tagValue)) + geom_histogram(stat = "count")
tag.count <- count(user.taggedartist, tagValues)
tag.count <- count(user.taggedartist, tagValue)
tag.count <- count(user.taggedartist, tagValue)
ggplot(tag.count) + geom_bar()
tag.count
tag.count <- count(user.taggedartist, tagValue)
ggplot(tag.count, aes(x=tagValue, y=n)) + geom_bar()
ggplot(user.taggedartist, aes(x=tagValue)) + geom_bar()
tag.count <- user.taggedartist %>% count(tagValue) %>% arrange(desc(n))
View(tag.count)
ggplot(tag.count, aes(x = tag.count, y=n)) + geom_bar()
tag.count <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
length(tag.count)
tag.count <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
length(tag.count$n)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
length(tag.count$n)
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus)
length(user.taggedartist$tagValue)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
length(tag.count$n)
#I thought this would be
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus)
View(user.taggedartist)
tag.count.80plus
str(tag.count.80plus)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
length(tag.count$n)
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus$tagValue)
user.taggedartist
View(user.taggedartist)
View(tag.count.80plus)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n))
View(tag.count.80plus)
# Chunk 1
require(dplyr)
require(ggplot2)
# Chunk 2
#use a file from the other dataset
user.artists.pairwise <- readRDS("user_artists_pairwise.RDS")
# Chunk 3
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
tags <- read.delim('hetrec2011-lastfm-2k/tags.dat', sep="\t")
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
View(user.taggedartist)
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
tags <- read.delim('hetrec2011-lastfm-2k/tags.dat', sep="\t")
user.taggedartist <- inner_join(user.taggedartist, tags, by = "tagID")
length(user.taggedartist$tagValue)
View(user.taggedartist)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n > 80)
View(tag.count.80plus)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n >= 80)
View(tag.count.80plus)
length(tag.count$n)
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus$tagValue)
View(user.taggedartist)
length(user.taggedartist$tagValue)
# Chunk 1
require(dplyr)
require(ggplot2)
# Chunk 2
#use a file from the other dataset
user.artists.pairwise <- readRDS("user_artists_pairwise.RDS")
# Chunk 3
user.taggedartist <- read.delim('hetrec2011-lastfm-2k/user_taggedartists.dat', sep="\t")
tags <- read.delim('hetrec2011-lastfm-2k/tags.dat', sep="\t")
# Chunk 4
user.taggedartist <- inner_join(user.taggedartist, tags, by = "tagID")
length(user.taggedartist$tagValue)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n >= 80)
length(tag.count$n)
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus$tagValue)
length(user.taggedartist$tagValue)
tag.count.80plus <- user.taggedartist %>%
count(tagValue) %>%
arrange(desc(n)) %>%
filter(n >= 80)
user.taggedartist <- user.taggedartist %>%
filter(tagValue %in% tag.count.80plus$tagValue)
length(user.taggedartist$tagValue)
