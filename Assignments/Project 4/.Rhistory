return(1 > x**2 + y**2)
}
sapply(1:100, FUN = quarter.circle())
Q <- 1 > x**2 + y**2
Q <- 1 > 1**2 + 2**2
quarter.circle <- function(){
x <- runif(1, 0.0, 1.0)
y <- runif(1, 0.0, 1.0)
Q <- 1 > x**2 + y**2
return(Q)
}
sapply(1:100, FUN = quarter.circle)
replicate(10, quarter.circle)
?replicate
n <- replicate(10, quarter.circle)
n
n <- sapply(10, quarter.circle)
n <- sapply(10, FUN = quarter.circle)
n <- sapply(1:10, FUN = quarter.circle)
quarter.circle
quarter.circle <- function(){
x <- runif(1, 0.0, 1.0)
y <- runif(1, 0.0, 1.0)
Q <- 1 > x**2 + y**2
return(Q)
}
quarter.circle
quarter.circle()
replicate(10, quarter.circle())
circle.inout <- replicate(iter, quarter.circle())
iter <- 100000
circle.inout <- replicate(iter, quarter.circle())
circle.out <- sum(circle.inout, na.rm=TRUE)
circle.out / iter
circle.out / iter * 4
quarter.circle <- function(){
x <- runif(1, 0.0, 1.0)
y <- runif(1, 0.0, 1.0)
Q <- 1 > x**2 + y**2
return(Q)
}
iter <- 100000
circle.inout <- replicate(iter, quarter.circle())
circle.out <- sum(circle.inout, na.rm=TRUE)
pi.estimate <- circle.out / iter * 4
pi.estimate
quarter.circle <- function(){
x <- runif(1, 0.0, 1.0)
y <- runif(1, 0.0, 1.0)
Q <- 1 > x**2 + y**2
return(Q)
}
iter <- 10000
circle.inout <- replicate(iter, quarter.circle())
circle.out <- sum(circle.inout, na.rm=TRUE)
pi.estimate <- circle.out / iter * 4
pi.estimate
length(34512)
?digits
?trunc
trunc(1234, 1)
trunc(1234, 2)
trunc(1234, 5)
trunc(1234, -1)
trunc(1234, -2)
str(iter)
seed = 2041
square <- seed ** 2
?substr
substr(a, first=2, last=4)
?strsplit
?substr
substr(a, 1)
a = 123456789
substr(a, 1)
substr(a, 2, 4)
?paste
seed = 2041
square <- seed ** 2
square <- toString(square)
square <-ifelse(nchar(square)%%2==0, print("yes"), print("no"))
seed = 2042
square <- seed ** 2
square <- toString(square)
square <-ifelse(nchar(square)%%2==0, print("yes"), print("no"))
seed = 2049
square <- seed ** 2
square <- toString(square)
square <-ifelse(nchar(square)%%2==0, print("yes"), print("no"))
nchar(square)
?nchar
square <-ifelse(nchar(square, type="chars")%%2==0, print("yes"), print("no"))
seed = 2042
square <- seed ** 2
square <- toString(square)
square <-ifelse(nchar(square, type="chars")%%2==0, print("yes"), print("no"))
?paste
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square))
square
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
sqyare
square
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
start <- (square.len / 2) + 2
stop <- (square.len / 2) - 2
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
start <- (square.len / 2) + 2
stop <- (square.len / 2) - 2
substr(square, start, stop)
square
start
stop
round(start)
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
start <- round((square.len / 2)) + 1
stop <- start - 4
substr(square, start, stop)
start
stop
square.len
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- round((square.len / 2)) + 1
stop <- start - 4
substr(square, start, stop)
start
stop
square.len
a = 123456789
substr(a, 2, 4)
substr(square, start, stop)
substr(square, 1, 2)
substr(square, 1, 5)
start
stop
substr(square, 5, 1)
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start 5 4
substr(square, start, stop)
seed = 2042
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 4
substr(square, start, stop)
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 4
substr(square, start, stop)
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
substr(square, start, stop)
middle.sq <- function(seed){
seed = 2041
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
seed = 2041
middle.sq(seed)
?recursive
rapply
?rapply
seed = 2041
for (i in 1:10){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq(1656)
1656**2
middle.sq(1656)
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- (square.len / 2) - 1
stop <- start + 3
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
seed = 2041
for (i in 1:10){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
?sample
race.simulation <- sample(x=horses, size = races, prob = odds)
odds <- c(1/7, 1/5, 1/9, 1/12, 1/4, 1/35, 1/15, 1/4)
horses <- c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD")
key <- 1:8
races <- 1000
race.simulation <- sample(x=horses, size = races, prob = odds)
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
str(race.simulation)
summary(race.simulation)
horses <- as.factors(c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD"))
horses <- as.factor(c("EF", "LL", "NL", "CC", "PuP", "LLH", "SS", "DD"))
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
summary(race.simulation)
hist(race.simulation)
summary(race.simulation)
race.simulation <- sample(x=horses, size = races, prob = odds, replace = T)
summary(race.simulation)
sum(odds)
library(ggplot2)
lag.times <- 2:7
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.simulation
qplot(lag.simulation)
qplot(x = lag.times, y = lag.prob)
qplot(x = lag.times, y = lag.prob) + qplot(lag.simulation)
qplot(x = lag.times, y = lag.prob) + geom_bar(lag.simulation, stat="bin")
summary(lag.simulation)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
summary(lag.simulation)
summary(lag.simulation)[1]
summary(lag.simulation)[1,]
summary(lag.simulation)[1:,]
summary(lag.simulation)[,1]
agggregate(lag.simulation)
aggregate(lag.simulation)
aggregate(lag.simulation, FUN=sum())
aggregate(lag.simulation, FUN=sum
)
library(dplyr)
count(lag.simulation)
table(lag.simulation)
lag <- table(lag.simulation)
lag
lag <- as.data.framd(table(lag.simulation))
lag <- as.data.frame(table(lag.simulation))
lag
lag.results <- cbind(lag, lag.prob)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
lag.results
ggplot(lag.results, aes(x=lag.simulation, lag.prob))
ggplot(lag.results, aes(x=lag.simulation, lag.prob)) +geom_bar()
ggplot(lag.results) +geom_bar(aes(x=lag.simulation, lag.prob))
lag.results
ggplot(lag.results) +geom_bar(aes(x=lag.simulation, y = lag.prob))
ggplot(lag.results) +geom_bar(aes(lag.prob))
ggplot(lag.results) +geom_point(aes(lag.prob))
lag.results
ggplot(lag.results) +geom_point(aes(x = log.simulation, y = lag.prob))
ggplot(lag.results) +geom_point(aes(x = lag.simulation, y = lag.prob))
ggplot(lag.results) +geom_point(aes(x = lag.simulation, y = lag.prob)) + geom_line(aes(x = lag.simulation, y = Freq))
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation)/1000)
lag.results <- cbind(lag, lag.prob)
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation)/trials)
lag.results <- cbind(lag, lag.prob)
lag.results
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
col.names(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
colnames(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
lag.results
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
print(lag.results)
library(knitr)
?kable
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
colnames(lag.results) <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
kable(lag.results)
lag.times <- as.factor(2:7)
lag.prob <- c(0.1, 0.25, 0.3, 0.2, 0.13, 0.02)
trials = 1000
lag.simulation <- sample(x = lag.times, size = trials, prob = lag.prob, replace = T)
lag.results <- as.data.frame(table(lag.simulation))
lag.results <- cbind(lag, lag.prob)
new.names <- c("Lag Time", "Simulated Occurances", "Actual Occurances")
colnames(lag.results) <- new.names
lag.results$`Simulated Occurances`<- lag.results$`Simulated Occurances` / trials
kable(lag.results)
str(new.names)
str(lag.results)
```{r test-bash, engine='bash'}
echo hello world
echo 'a b c' | sed 's/ /\|/g'
# number of lines
awk 'END{print NR;}' 027-engine-bash.Rmd
```
```{r test-bash, engine='bash'}
echo hello world
# number of lines
echo hello world
echo 'a b c' | sed 's/ /\|/g'
# number of lines
awk 'END{print NR;}' 027-engine-bash.Rmd
library(c("readr", "bigvis"))
library("readr")
library("bigviz")
install.packages("devtools")
library("devtools")
devtools::install_github("hadley/bigvis")
install.packages("devtools")
devtools::install_github("hadley/bigvis")
library('devtools')
devtools::install_github("hadley/bigvis")
library("readr")
# use bigvis to bin, condense, smooth and present data
library('bigvis')
library('ggplot2')
# subset the diamonds data
mydiamonds <- subset(diamonds, carat < 2.75)
# condense avg price based on bins of carat sizes of .1 carat intervals
myd <- condense(bin(mydiamonds$carat, .1), z=mydiamonds$price, summary="mean")
# smooth out the trend
myds <- smooth(myd, 50, var=".mean", type="robust")
# plot the orginal binned prices vs the smoothed trend line
ggplot() + geom_line(data=myd, aes(x=mydiamonds.carat, y=.mean, colour="Avg Price")) +
geom_line(data=myds, aes(x=mydiamonds.carat, y=.mean, colour="Smoothed")) +
ggtitle("Avg Diamond prices by binned Carat") +
ylab("Avg Price") +
xlab("Carats") +
scale_colour_manual("", breaks=c("Avg Price","Smoothed"), values=c("blue", "black"))
round(1.25, 1)
round(1.25, 0)
DT1 = data.table(a = 1:2, b = 1:2)
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
?gvisMerge
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_1')
install.packages(c("datadr", "git2r", "housingData", "htmltools", "nlme", "rbokeh", "RcppArmadillo", "rex", "TTR"))
install.packages("lpSolve")
payoff.matrix <- rbind(
c(3000, 4500, 6000),
c(1000, 9000, 2000),
c(4500, 4000, 3500))
payoff.matrix <- as.matrix(rbind(
c(3000, 4500, 6000),
c(1000, 9000, 2000),
c(4500, 4000, 3500)))
payoff.matrix <- as.matrix(rbind(
c(10000, 6500, -4000),
c(8000, 6000, 1000),
c(5000, 5000, 5000)))
payoff.matrix
constraint.matrix <- cbind(payoff.matrix[ , 1] -
payoff.matrix[ , 3],
payoff.matrix[ , 2] -
payoff.matrix[ , 3],
c(-1, -1, -1))
constraint.matrix
right.side <- -1 * payoff.matrix[ , 3]
right.side
install.packages("reshape")
require(igraph) # for networks
require(reshape) # to change the resulted data in a format ggplot2 can use
require(ggplot2) # for plotting
# size of the lattice
sidelength<img class="alignnone wp-image-594 size-full" src="https://marcosmolla.files.wordpress.com/2015/07/abm_3-1.png" alt="ABM_3-1" width="672" height="480" />
library(knitr)
library(igraph)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + path("a", "b")
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + path("a", "b")
plot(g)
V(g)
path(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + edge("a", "b")
plot(g)
g <- make_empty_graph() + vertices(c("a", "b"))
g <- g + edge("a", "b")
g <- g + edge("b", "a")
plot(g)
path(g)
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
install.packages("reconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-FinalProject/ConsumerExpectationsExplorer')
install.packages("data.table")
setwd("~/Documents/Graduate School/DATA 621 - Business Analytics and Data Mining/DATA621-Homework/Homework_4")
# Libraries/CONSTANTS
library(stringr)
library(aod)
library(ggplot2)
library(Rcpp)
library(knitr)
library(Amelia)
library(MASS)
DO_DEBUG = TRUE
install.packages("aod", "Amelia")
y
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 4")
setwd("~/Documents/Graduate School/DATA 643 - Recommender Systems/643-RecommenderSystems/Assignments/Project 4")
library(readr)
library(tidyr)
user.artists.pairwise <- read.delim('hetrec2011-lastfm-2k/user_artists.dat', sep="\t")
artists <- read.delim('hetrec2011-lastfm-2k/artists.dat', sep="\t") %>%
select(id, name)
head(artist)
head(artists)
artists <- read.delim('hetrec2011-lastfm-2k/artists.dat', sep="\t")
?read_delim()
library(readr)
library(tidyr)
library(dplyr)
user.artists.pairwise <- read_delim('hetrec2011-lastfm-2k/user_artists.dat', delim = "\t")
artists <- read_delim('hetrec2011-lastfm-2k/artists.dat', delim = "\t") %>% select(id, name)
user.artists.pairwise <- read_delim('hetrec2011-lastfm-2k/user_artists.dat', delim = "\t", trim_ws = TRUE)
artists <- read_delim('hetrec2011-lastfm-2k/artists.dat', delim = "\t", trim_ws = TRUE) %>% select(id, name)
user.artists.pairwise <- read_delim('hetrec2011-lastfm-2k/user_artists.dat', delim = "\t")
artists <- read_delim('hetrec2011-lastfm-2k/artists.dat', delim = "\t") %>% select(id, name)
